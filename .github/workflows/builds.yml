name: Build

on:
  push:
    branches: [ 'feature/**' ]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  OWNER: ${{ github.actor }}
  PROJECT_NAME: burraco
  REGISTRY: ghcr.io
  GAME_MODULE: game
  GAME_PROJECT_PATH: Game
  GAME_ARTIFACT_LABEL: game-artifact
  GAME_SERVICE_NAME: game-service
  DEALER_MODULE: dealer
  DEALER_PROJECT_PATH: Dealer
  DEALER_ARTIFACT_LABEL: dealer-artifact
  DEALER_SERVICE_NAME: dealer-service

jobs:
  job-build-game:
    name: Create Game artifactory
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - uses: gradle/wrapper-validation-action@v1
      - uses: gradle/gradle-build-action@v2
        with:
          arguments: build jacocoTestReport
          build-root-directory: ${{ env.GAME_PROJECT_PATH }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_ARTIFACT_LABEL }}
          path: ./${{ env.GAME_PROJECT_PATH }}/build/libs/*-all.jar

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          directory: ./${{ env.GAME_PROJECT_PATH }}/build/reports/jacoco
          #          files: ./coverage1.xml,./coverage2.xml # optional
          flags: unittests
          #          name: codecov-umbrella # optional
          #          fail_ci_if_error: true # optional (default = false)
          verbose: true

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  job-build-and-publish-game-container:
    name: Build and publish Game service
    needs: job-build-game
    runs-on: ubuntu-latest

    permissions:
     contents: read
     packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.GAME_ARTIFACT_LABEL }}
          path: ./artifactory

      - name: Display structure of downloaded files
        run: ls -l
        working-directory: ./artifactory

      - name: packages rename
        run: mv ./artifactory/*.jar ./${{ env.GAME_PROJECT_PATH }}/${{ env.GAME_MODULE }}.jar

      - name: Display structure of downloaded files
        run: ls -l ./${{ env.GAME_PROJECT_PATH }}/

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROJECT_NAME }}/${{ env.GAME_SERVICE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=tag,enable=true,priority=600
            type=ref,event=branch
          flavor: |
            latest=auto
            prefix=
            suffix=
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.GAME_PROJECT_PATH }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  job-build-dealer:
    name: Create Dealer artifactory
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - uses: gradle/wrapper-validation-action@v1
      - uses: gradle/gradle-build-action@v2
        with:
          arguments: build jacocoTestReport
          build-root-directory: ${{ env.DEALER_PROJECT_PATH }}

#      - name: Build with Gradle
#        run: |
#          cd ./${{ env.DEALER_PROJECT_PATH }}
#          ./gradlew build jacocoTestReport
#          ls -l ./build/libs/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DEALER_ARTIFACT_LABEL }}
          path: ./${{ env.DEALER_PROJECT_PATH }}/build/libs/*-all.jar

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          directory: ./${{ env.DEALER_PROJECT_PATH }}/build/reports/jacoco
          #          files: ./coverage1.xml,./coverage2.xml # optional
          flags: unittests
          #          name: codecov-umbrella # optional
          #          fail_ci_if_error: true # optional (default = false)
          verbose: true

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  job-build-and-publish-dealer-container:
    name: Build and publish Dealer service
    needs: job-build-dealer
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.DEALER_ARTIFACT_LABEL }}
          path: ./artifactory

      - name: Display structure of downloaded files
        run: ls -l
        working-directory: ./artifactory

      - name: packages rename
        run: mv ./artifactory/*.jar ./${{ env.DEALER_PROJECT_PATH }}/${{ env.DEALER_MODULE }}.jar

      - name: Display structure of downloaded files
        run: ls -l ./${{ env.DEALER_PROJECT_PATH }}/

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROJECT_NAME }}/${{ env.DEALER_SERVICE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=tag,enable=true,priority=600
            type=ref,event=branch
          flavor: |
            latest=auto
            prefix=
            suffix=
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.DEALER_PROJECT_PATH }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#  job-build-and-publish-dealer-container:
#    name: Build and publish Dealer service
#    needs: job-build-package
#    runs-on: ubuntu-latest
#
#    permissions:
#      contents: read
#      packages: write
#
#    env:
#      MODULE: Dealer
#      SERVICE_NAME: dealer-service
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: burraco-artifacts
#
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - name: packages rename
#        run: mv ./${{ env.MODULE }}/build/libs/*.jar ./${{ env.MODULE }}/${{ env.MODULE }}.jar
#
#      - name: Display structure of downloaded files
#        run: ls -l ./${{ env.MODULE }}/
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ env.OWNER }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v3
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}
#          tags: |
#            type=semver,pattern={{version}}
#            type=ref,event=tag,enable=true,priority=600
#          flavor: |
#            latest=true
#            prefix=
#            suffix=
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v2
#        with:
#          context: ./${{ env.MODULE }}/
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
#  job-build-and-publish-eventstore-container:
#    name: Build and publish Eventstore service
#    needs: job-build-package
#    runs-on: ubuntu-latest
#
#    permissions:
#      contents: read
#      packages: write
#
#    env:
#      MODULE: EventStore
#      SERVICE_NAME: eventstore-service
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: burraco-artifacts
#
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - name: packages rename
#        run: mv ./${{ env.MODULE }}/build/libs/*.jar ./${{ env.MODULE }}/${{ env.MODULE }}.jar
#
#      - name: Display structure of downloaded files
#        run: ls -l ./${{ env.MODULE }}/
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ env.OWNER }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v3
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}
#          tags: |
#            type=semver,pattern={{version}}
#            type=ref,event=tag,enable=true,priority=600
#          flavor: |
#            latest=true
#            prefix=
#            suffix=
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v2
#        with:
#          context: ./${{ env.MODULE }}/
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}

  release-game-service-helm-chart:
    name: Publish Game service helm chart
    needs: job-build-and-publish-game-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.1.0
        with:
          charts_dir: ./${{ env.GAME_PROJECT_PATH }}
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  release-dealer-service-helm-chart:
    name: Publish Dealer service helm chart
    needs: job-build-and-publish-dealer-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.1.0
        with:
          charts_dir: ./${{ env.DEALER_PROJECT_PATH }}
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
