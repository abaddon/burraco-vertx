name: CI

on:
  push:
    branches: [ master ]
  create:
    tags: [ '*' ]
#  pull_request:
#    branches: [ master ]

#  workflow_dispatch:

env:
  OWNER: ${{ github.actor }}
  PROJECT_NAME: burraco
  REGISTRY: ghcr.io
  GAME_PATH: Game
  DEALER_PATH: Dealer
  EVENTSTORE_PATH: EventStore


jobs:
  job-build-package:
    name: Create Burraco articatory
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew shadowJar

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: burraco-artifacts
          path: |
            ./${{ env.GAME_PATH }}/build/libs
            ./${{ env.DEALER_PATH }}/build/libs
            ./${{ env.EVENTSTORE_PATH }}/build/libs

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties


  job-build-and-publish-game-container:
    name: Build and publish Game service
    needs: job-build-package
    runs-on: ubuntu-latest

    permissions:
     contents: read
     packages: write

    env:
      MODULE: Game
      SERVICE_NAME: game-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: burraco-artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: packages rename
        run: mv ./${{ env.MODULE }}/build/libs/*.jar ./${{ env.MODULE }}/${{ env.MODULE }}.jar

      - name: Display structure of downloaded files
        run: ls -l ./${{ env.MODULE }}/

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=tag,enable=true,priority=600
          flavor: |
            latest=true
            prefix=
            suffix=
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.MODULE }}/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  job-build-and-publish-dealer-container:
    name: Build and publish Dealer service
    needs: job-build-package
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      MODULE: Dealer
      SERVICE_NAME: dealer-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: burraco-artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: packages rename
        run: mv ./${{ env.MODULE }}/build/libs/*.jar ./${{ env.MODULE }}/${{ env.MODULE }}.jar

      - name: Display structure of downloaded files
        run: ls -l ./${{ env.MODULE }}/

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=tag,enable=true,priority=600
          flavor: |
            latest=true
            prefix=
            suffix=
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.MODULE }}/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  job-build-and-publish-eventstore-container:
    name: Build and publish Eventstore service
    needs: job-build-package
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      MODULE: EventStore
      SERVICE_NAME: eventstore-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: burraco-artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: packages rename
        run: mv ./${{ env.MODULE }}/build/libs/*.jar ./${{ env.MODULE }}/${{ env.MODULE }}.jar

      - name: Display structure of downloaded files
        run: ls -l ./${{ env.MODULE }}/

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=tag,enable=true,priority=600
          flavor: |
            latest=true
            prefix=
            suffix=
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.MODULE }}/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release-game-service-helm-chart:
    name: Publish Game service helm chart
    needs: job-build-and-publish-game-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.1.0
        with:
          charts_dir: ./${{ env.GAME_PATH }}
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
