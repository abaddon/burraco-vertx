openapi: 3.0.0

info:
  title: Burraco Player APIs
  version: 0.0.1

servers:
  - url: "{protocol}://{address}:{port}"
    description: Player Service address
    variables:
      address:
        default: localhost
        description: Address of the server
      port:
        default: "8082"
        description: Port of the server
      protocol:
        default: http
        description: Protocol for interacting with server
        enum:
          - http

paths:
  /health:
    get:
      operationId: 'healthCheck'
      summary: 'Player service Health Check'
      description: 'Public API to monitoring the health of the webservice'
      tags:
        - Public
      responses:
        '200':
          $ref: '#/components/responses/HealthCheckResponse'

  /player:
    post:
      operationId: 'createPlayer'
      summary: 'Create a new player'
      description: 'Public API to create a new player for a game'
      tags:
        - Player
        - Public
      requestBody:
        $ref: '#/components/requestBodies/CreatePlayerRequest'
      responses:
        '200':
          $ref: '#/components/responses/PlayerResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /players/{playerId}:
    delete:
      operationId: 'deletePlayer'
      summary: 'Delete a player'
      description: 'Public API to delete an existing player'
      tags:
        - Player
        - Public
      parameters:
        - name: 'playerId'
          description: 'Player identifier'
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/PlayerResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

components:
  schemas:
    HealthCheck:
      type: object
      properties:
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheckProcedure"
        outcome:
          type: string
    HealthCheckProcedure:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
    Player:
      type: object
      properties:
        playerId:
          type: string
          format: uuid
        gameId:
          type: string
          format: uuid
        user:
          type: string
        status:
          type: string
          enum:
            - DRAFT
            - DELETED
    PlayerId:
      type: string
      format: uuid
    GameId:
      type: string
      format: uuid
    ErrorMessage:
      type: object
      properties:
        code:
          type: integer
        errorMessages:
          type: array
          items:
            type: object

  requestBodies:
    CreatePlayerRequest:
      description: 'Create player request.'
      content:
        application/json:
          schema:
            type: object
            required:
              - gameId
              - user
            properties:
              gameId:
                $ref: "#/components/schemas/GameId"
              user:
                type: string

  responses:
    HealthCheckResponse:
      description: 'Health Check response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthCheck'
    PlayerResponse:
      description: 'Player response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Player'
    ErrorResponse:
      description: 'Error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'